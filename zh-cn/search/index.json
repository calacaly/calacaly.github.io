[{"content":"让我们从最简单的system call开始\nhello world for system call\n1 2 3 4 5 6 7 8 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main() { int pid = getpid(); printf(\u0026#34;PID: %d\\n\u0026#34;, pid); return 0; } 运行这段程序可以获得进程ID\n简单理解syscall 执行syscall指令后，cpu从用户态切换到内核态 syscall指令会调用内核的syscall函数，执行完毕后，cpu从内核态切换回用户态 参数和结果都在寄存器中传递 zig示例 1 2 3 4 5 6 const std = @import(\u0026#34;std\u0026#34;); pub fn main() !void { const pid: i32 = std.posix.system.getpid(); std.debug.print(\u0026#34;PID: {d}\\n\u0026#34;, .{pid}); } rust示例 1 2 3 4 5 extern crate libc; fn main() { let pid: i32 = unsafe { libc::getpid() }; println!(\u0026#34;PID: {}\u0026#34;, pid); } ","date":"2025-09-01T16:25:33+08:00","permalink":"https://calacaly.github.io/zh-cn/p/system-call/","title":"System Call"},{"content":"Welcome to Hugo theme Stack. This is your first post. Edit or delete it, then start writing!\nFor more information about this theme, check the documentation: https://stack.jimmycai.com/\nWant a site like this? Check out hugo-theme-stack-stater\nPhoto by Pawel Czerwinski on Unsplash\n","date":"2022-03-06T00:00:00Z","image":"https://calacaly.github.io/zh-cn/p/hello-world/cover_hu_e95a4276bf860a84.jpg","permalink":"https://calacaly.github.io/zh-cn/p/hello-world/","title":"Hello World"}]